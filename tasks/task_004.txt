# Task ID: 4
# Title: Route Protection Implementation
# Status: done
# Dependencies: 2
# Priority: high
# Description: Create a RequireAuth component to protect routes based on authentication status and implement permission-based access control.
# Details:
1. Create a RequireAuth component (src/auth/RequireAuth.tsx):
```typescript
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './AuthContext';

interface RequireAuthProps {
  children: React.ReactNode;
  requiredRoles?: string[];
}

export const RequireAuth: React.FC<RequireAuthProps> = ({ children, requiredRoles = [] }) => {
  const { user, isAuthenticated, isLoading } = useAuth();
  const location = useLocation();
  
  // Show loading indicator while authentication is in progress
  if (isLoading) {
    return <div className="loading-spinner">Loading...</div>;
  }
  
  // Redirect to login if not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }
  
  // Check for required roles if specified
  if (requiredRoles.length > 0) {
    const hasRequiredRole = requiredRoles.some(role => 
      user?.roles.includes(role)
    );
    
    if (!hasRequiredRole) {
      return <Navigate to="/unauthorized" replace />;
    }
  }
  
  return <>{children}</>;
};
```

2. Create an Unauthorized page (src/pages/Unauthorized.tsx):
```typescript
import React from 'react';
import { Link } from 'react-router-dom';

const Unauthorized: React.FC = () => {
  return (
    <div className="unauthorized-container">
      <h1>Unauthorized Access</h1>
      <p>You do not have permission to access this resource.</p>
      <Link to="/" className="btn btn-primary">Return to Dashboard</Link>
    </div>
  );
};

export default Unauthorized;
```

3. Update the routing configuration to use RequireAuth (src/App.tsx):
```typescript
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { RequireAuth } from './auth/RequireAuth';
import Dashboard from './pages/Dashboard';
import Login from './pages/Login';
import Unauthorized from './pages/Unauthorized';
import RoleManagement from './pages/RoleManagement';
import PermissionManagement from './pages/PermissionManagement';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        
        <Route path="/" element={
          <RequireAuth>
            <Dashboard />
          </RequireAuth>
        } />
        
        <Route path="/roles" element={
          <RequireAuth requiredRoles={['Administrator']}>
            <RoleManagement />
          </RequireAuth>
        } />
        
        <Route path="/roles/:roleId/permissions" element={
          <RequireAuth requiredRoles={['Administrator']}>
            <PermissionManagement />
          </RequireAuth>
        } />
        
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;
```

4. Create a utility to conditionally render navigation items based on roles (src/components/Navigation.tsx):
```typescript
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../auth/AuthContext';

interface NavItemProps {
  to: string;
  label: string;
  requiredRoles?: string[];
}

const NavItem: React.FC<NavItemProps> = ({ to, label, requiredRoles = [] }) => {
  const { user } = useAuth();
  
  // Don't render if user doesn't have required roles
  if (requiredRoles.length > 0 && 
      !requiredRoles.some(role => user?.roles.includes(role))) {
    return null;
  }
  
  return <li><Link to={to}>{label}</Link></li>;
};

const Navigation: React.FC = () => {
  const { isAuthenticated, logout } = useAuth();
  
  if (!isAuthenticated) return null;
  
  return (
    <nav className="main-navigation">
      <ul>
        <NavItem to="/" label="Dashboard" />
        <NavItem to="/roles" label="Role Management" requiredRoles={['Administrator']} />
        {/* Add other navigation items */}
        <li><button onClick={logout}>Logout</button></li>
      </ul>
    </nav>
  );
};

export default Navigation;
```

# Test Strategy:
1. Create unit tests for the RequireAuth component using React Testing Library
2. Test redirection to login page when user is not authenticated
3. Test redirection to unauthorized page when user doesn't have required roles
4. Verify that children are rendered when authentication and authorization checks pass
5. Test the Navigation component to ensure it correctly shows/hides items based on user roles
6. Test the complete routing flow with different authentication states
7. Verify that protected routes cannot be accessed directly without authentication
