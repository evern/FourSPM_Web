# Task ID: 5
# Title: Login Experience Implementation
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Replace the current login form with MSAL login button and implement popup-based login experience with silent authentication for returning users.
# Details:
1. Create a Login page component (src/pages/Login.tsx):
```typescript
import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../auth/AuthContext';

const Login: React.FC = () => {
  const { login, isAuthenticated, isLoading, error } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [loginError, setLoginError] = useState<string | null>(null);
  
  // Get the intended destination from location state or default to home
  const from = (location.state as any)?.from?.pathname || '/';
  
  useEffect(() => {
    // If already authenticated, redirect to the intended destination
    if (isAuthenticated) {
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, navigate, from]);
  
  const handleLogin = async () => {
    try {
      setLoginError(null);
      await login();
      // Navigation will happen in the useEffect above once isAuthenticated updates
    } catch (err) {
      setLoginError('Login failed. Please try again.');
      console.error('Login error:', err);
    }
  };
  
  return (
    <div className="login-container">
      <div className="login-card">
        <img src="/logo.png" alt="FourSPM Logo" className="login-logo" />
        <h1>Welcome to FourSPM</h1>
        <p>Please sign in with your Microsoft account to continue.</p>
        
        {loginError && (
          <div className="error-message">{loginError}</div>
        )}
        
        {error && (
          <div className="error-message">{error.message}</div>
        )}
        
        <button 
          className="ms-login-button" 
          onClick={handleLogin}
          disabled={isLoading}
        >
          {isLoading ? 'Signing in...' : 'Sign in with Microsoft'}
        </button>
      </div>
    </div>
  );
};

export default Login;
```

2. Create styles for the login page (src/styles/login.css):
```css
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f5f5f5;
}

.login-card {
  width: 100%;
  max-width: 400px;
  padding: 2rem;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.login-logo {
  width: 120px;
  margin-bottom: 1.5rem;
}

.ms-login-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0.75rem 1rem;
  margin-top: 1.5rem;
  background-color: #0078d4;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.ms-login-button:hover {
  background-color: #106ebe;
}

.ms-login-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.error-message {
  color: #d83b01;
  margin: 1rem 0;
  padding: 0.5rem;
  background-color: #fde7e9;
  border-radius: 4px;
}
```

3. Implement silent authentication in the main App component (src/App.tsx):
```typescript
import React, { useEffect } from 'react';
import { useMsal } from '@azure/msal-react';
import { loginRequest } from './auth/msalConfig';

function App() {
  const { instance, accounts } = useMsal();
  
  useEffect(() => {
    // Attempt silent authentication if there's an account
    const attemptSilentAuth = async () => {
      if (accounts.length > 0) {
        try {
          await instance.acquireTokenSilent({
            ...loginRequest,
            account: accounts[0]
          });
        } catch (error) {
          console.error('Silent authentication failed:', error);
          // Silent auth failed, but we don't need to do anything here
          // The user will be redirected to login if they try to access a protected route
        }
      }
    };
    
    attemptSilentAuth();
  }, [instance, accounts]);
  
  // Rest of your App component
}
```

4. Create a loading indicator component (src/components/LoadingSpinner.tsx):
```typescript
import React from 'react';
import '../styles/loading-spinner.css';

interface LoadingSpinnerProps {
  message?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ message = 'Loading...' }) => {
  return (
    <div className="loading-spinner-container">
      <div className="loading-spinner"></div>
      <p>{message}</p>
    </div>
  );
};

export default LoadingSpinner;
```

# Test Strategy:
1. Create unit tests for the Login component using React Testing Library
2. Test the login button functionality and verify it calls the login function
3. Test redirection after successful authentication
4. Verify error handling and error message display
5. Test silent authentication for returning users
6. Test the loading state during authentication
7. Verify that the login page is responsive and displays correctly on different screen sizes
8. Test accessibility of the login page (keyboard navigation, screen reader compatibility)
