# Task ID: 8
# Title: Implement Protected Routes
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Create a higher-order component or route guard to protect routes that require authentication.
# Details:
1. Create a protected route component (src/components/ProtectedRoute.tsx):
```typescript
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../auth/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: 'user' | 'admin';
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRole = 'user' 
}) => {
  const { isAuthenticated, user } = useAuth();
  const location = useLocation();

  // Check if user is authenticated
  if (!isAuthenticated) {
    // Redirect to login page, but save the current location they were trying to go to
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // For role-based access control (if implemented)
  if (requiredRole === 'admin' && !user?.roles?.includes('admin')) {
    // User is authenticated but doesn't have the required role
    return <Navigate to="/unauthorized" replace />;
  }

  // User is authenticated and has the required role (if specified)
  return <>{children}</>;
};
```

2. Update the application routes to use the protected route component:
```typescript
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { ProtectedRoute } from './components/ProtectedRoute';
import { Dashboard } from './pages/Dashboard';
import { AdminPanel } from './pages/AdminPanel';
import { Login } from './pages/Login';
import { Unauthorized } from './pages/Unauthorized';

export const AppRoutes = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        <Route 
          path="/dashboard" 
          element={
            <ProtectedRoute>
              <Dashboard />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/admin" 
          element={
            <ProtectedRoute requiredRole="admin">
              <AdminPanel />
            </ProtectedRoute>
          } 
        />
      </Routes>
    </BrowserRouter>
  );
};
```

3. Create login, unauthorized, and other necessary pages
4. Implement redirect logic to return users to their intended destination after login

# Test Strategy:
1. Test protected routes with authenticated and unauthenticated users
2. Verify redirect to login page works correctly
3. Test role-based route protection
4. Verify redirect back to original destination after login
5. Test edge cases like direct URL access to protected routes
