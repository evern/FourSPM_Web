# Task ID: 10
# Title: Update User Database Model
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Update the database model to integrate with Azure AD user identities and store necessary user information.
# Details:
1. Update the User entity model to include Azure AD identifiers:
```csharp
public class User
{
    public int Id { get; set; }
    
    // Azure AD specific fields
    public string AzureAdObjectId { get; set; } // The unique identifier from Azure AD
    public string Email { get; set; }
    public string DisplayName { get; set; }
    
    // Existing application-specific fields
    public DateTime CreatedAt { get; set; }
    public DateTime? LastLoginAt { get; set; }
    public bool IsActive { get; set; }
    
    // Navigation properties
    public virtual ICollection<UserRole> UserRoles { get; set; }
    // Other navigation properties as needed
}
```

2. Create or update database migration:
```csharp
public partial class AddAzureAdFields : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.AddColumn<string>(
            name: "AzureAdObjectId",
            table: "Users",
            type: "nvarchar(128)",
            maxLength: 128,
            nullable: true);

        migrationBuilder.AddColumn<string>(
            name: "Email",
            table: "Users",
            type: "nvarchar(256)",
            maxLength: 256,
            nullable: true);

        migrationBuilder.AddColumn<string>(
            name: "DisplayName",
            table: "Users",
            type: "nvarchar(256)",
            maxLength: 256,
            nullable: true);

        // Create a unique index on AzureAdObjectId
        migrationBuilder.CreateIndex(
            name: "IX_Users_AzureAdObjectId",
            table: "Users",
            column: "AzureAdObjectId",
            unique: true,
            filter: "[AzureAdObjectId] IS NOT NULL");
    }

    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropIndex(
            name: "IX_Users_AzureAdObjectId",
            table: "Users");

        migrationBuilder.DropColumn(
            name: "AzureAdObjectId",
            table: "Users");

        migrationBuilder.DropColumn(
            name: "Email",
            table: "Users");

        migrationBuilder.DropColumn(
            name: "DisplayName",
            table: "Users");
    }
}
```

3. Update the user repository to find users by Azure AD Object ID:
```csharp
public async Task<User> GetUserByAzureAdObjectIdAsync(string azureAdObjectId)
{
    return await _context.Users
        .Include(u => u.UserRoles)
        .ThenInclude(ur => ur.Role)
        .FirstOrDefaultAsync(u => u.AzureAdObjectId == azureAdObjectId);
}
```

4. Implement logic to create or update user records based on Azure AD information

# Test Strategy:
1. Test database migrations
2. Verify user lookup by Azure AD Object ID
3. Test user creation with Azure AD information
4. Verify existing user data is preserved during migration
5. Test database queries with the updated model
