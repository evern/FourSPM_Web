# Task ID: 11
# Title: Implement User Service Integration
# Status: pending
# Dependencies: 5, 10
# Priority: medium
# Description: Create or update the user service to integrate with Azure AD authentication and manage user information.
# Details:
1. Create or update the user service to handle Azure AD user information:
```csharp
public class UserService : IUserService
{
    private readonly ApplicationDbContext _context;
    private readonly ILogger<UserService> _logger;

    public UserService(ApplicationDbContext context, ILogger<UserService> logger)
    {
        _context = context;
        _logger = logger;
    }

    public async Task<User> GetOrCreateUserAsync(ClaimsPrincipal claimsPrincipal)
    {
        // Extract Azure AD object ID from claims
        var objectId = claimsPrincipal.FindFirstValue("http://schemas.microsoft.com/identity/claims/objectidentifier");
        if (string.IsNullOrEmpty(objectId))
        {
            _logger.LogWarning("No object ID found in claims");
            throw new InvalidOperationException("User identity not found");
        }

        // Try to find existing user
        var user = await _context.Users
            .Include(u => u.UserRoles)
            .ThenInclude(ur => ur.Role)
            .FirstOrDefaultAsync(u => u.AzureAdObjectId == objectId);

        if (user == null)
        {
            // Create new user from claims
            user = new User
            {
                AzureAdObjectId = objectId,
                Email = claimsPrincipal.FindFirstValue("preferred_username") ?? 
                       claimsPrincipal.FindFirstValue(ClaimTypes.Email) ?? 
                       claimsPrincipal.FindFirstValue(ClaimTypes.Name),
                DisplayName = claimsPrincipal.FindFirstValue("name") ?? 
                             claimsPrincipal.FindFirstValue(ClaimTypes.GivenName),
                CreatedAt = DateTime.UtcNow,
                IsActive = true,
                UserRoles = new List<UserRole>()
            };

            // Assign default role
            var defaultRole = await _context.Roles.FirstOrDefaultAsync(r => r.Name == "User");
            if (defaultRole != null)
            {
                user.UserRoles.Add(new UserRole { RoleId = defaultRole.Id });
            }

            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            _logger.LogInformation("Created new user from Azure AD: {Email}", user.Email);
        }
        else
        {
            // Update existing user information if needed
            bool updated = false;
            var email = claimsPrincipal.FindFirstValue("preferred_username") ?? 
                       claimsPrincipal.FindFirstValue(ClaimTypes.Email) ?? 
                       claimsPrincipal.FindFirstValue(ClaimTypes.Name);
            var displayName = claimsPrincipal.FindFirstValue("name") ?? 
                             claimsPrincipal.FindFirstValue(ClaimTypes.GivenName);

            if (email != null && user.Email != email)
            {
                user.Email = email;
                updated = true;
            }

            if (displayName != null && user.DisplayName != displayName)
            {
                user.DisplayName = displayName;
                updated = true;
            }

            user.LastLoginAt = DateTime.UtcNow;
            updated = true;

            if (updated)
            {
                await _context.SaveChangesAsync();
                _logger.LogInformation("Updated user information for: {Email}", user.Email);
            }
        }

        return user;
    }

    // Other user service methods
}
```

2. Register the user service in the dependency injection container:
```csharp
builder.Services.AddScoped<IUserService, UserService>();
```

3. Update controllers to use the user service for getting current user information:
```csharp
[Authorize]
[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IUserService _userService;

    public UserController(IUserService userService)
    {
        _userService = userService;
    }

    [HttpGet("me")]
    public async Task<ActionResult<UserDto>> GetCurrentUser()
    {
        var user = await _userService.GetOrCreateUserAsync(User);
        return Ok(new UserDto
        {
            Id = user.Id,
            Email = user.Email,
            DisplayName = user.DisplayName,
            Roles = user.UserRoles.Select(ur => ur.Role.Name).ToList()
        });
    }

    // Other user-related endpoints
}
```

# Test Strategy:
1. Test user creation from Azure AD claims
2. Verify user information is correctly extracted from claims
3. Test user lookup by Azure AD Object ID
4. Verify user information is updated correctly
5. Test role assignment for new users
6. Test the current user endpoint with authenticated requests
