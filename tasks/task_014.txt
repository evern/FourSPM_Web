# Task ID: 14
# Title: Implement Role-Based Access Control
# Status: pending
# Dependencies: 5, 11
# Priority: medium
# Description: Implement role-based access control using Azure AD groups and application roles.
# Details:
1. Configure application roles in Azure AD:
   - In the Azure portal, navigate to Azure AD > App registrations > [Your app] > App roles
   - Create roles for 'User' and 'Admin'
   - Assign users to these roles in Azure AD

2. Update the backend to extract roles from tokens:
```csharp
// Add to UserService.cs
private List<string> GetUserRolesFromClaims(ClaimsPrincipal claimsPrincipal)
{
    var roles = new List<string>();
    
    // Check for role claims
    var roleClaims = claimsPrincipal.FindAll(ClaimTypes.Role).ToList();
    if (roleClaims.Any())
    {
        roles.AddRange(roleClaims.Select(c => c.Value));
    }
    
    // Check for app role claims (from Azure AD app roles)
    var appRoleClaims = claimsPrincipal.FindAll("http://schemas.microsoft.com/ws/2008/06/identity/claims/role").ToList();
    if (appRoleClaims.Any())
    {
        roles.AddRange(appRoleClaims.Select(c => c.Value));
    }
    
    // If no roles found, assign default role
    if (!roles.Any())
    {
        roles.Add("User");
    }
    
    return roles.Distinct().ToList();
}

// Update GetOrCreateUserAsync method to use roles from claims
public async Task<User> GetOrCreateUserAsync(ClaimsPrincipal claimsPrincipal)
{
    // Existing code...
    
    if (user == null)
    {
        // Create new user...
        
        // Assign roles from claims
        var userRoles = GetUserRolesFromClaims(claimsPrincipal);
        foreach (var roleName in userRoles)
        {
            var role = await _context.Roles.FirstOrDefaultAsync(r => r.Name == roleName);
            if (role != null)
            {
                user.UserRoles.Add(new UserRole { RoleId = role.Id });
            }
        }
        
        // Save user...
    }
    else
    {
        // Update existing user...
        
        // Update roles if needed
        var currentRoles = user.UserRoles.Select(ur => ur.Role.Name).ToList();
        var claimRoles = GetUserRolesFromClaims(claimsPrincipal);
        
        // Add missing roles
        foreach (var roleName in claimRoles.Except(currentRoles))
        {
            var role = await _context.Roles.FirstOrDefaultAsync(r => r.Name == roleName);
            if (role != null)
            {
                user.UserRoles.Add(new UserRole { RoleId = role.Id });
                updated = true;
            }
        }
        
        // Remove roles that are no longer assigned
        foreach (var userRole in user.UserRoles.ToList())
        {
            if (!claimRoles.Contains(userRole.Role.Name))
            {
                user.UserRoles.Remove(userRole);
                updated = true;
            }
        }
        
        // Save changes...
    }
    
    return user;
}
```

3. Update authorization policies to use roles:
```csharp
// In Program.cs or Startup.cs
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("RequireUserRole", policy =>
        policy.RequireRole("User"));
    
    options.AddPolicy("RequireAdminRole", policy =>
        policy.RequireRole("Admin"));
});
```

4. Update frontend to handle role-based UI rendering:
```typescript
// Add to AuthContext.tsx
const [userRoles, setUserRoles] = useState<string[]>([]);

// Update after authentication
useEffect(() => {
  if (isAuthenticated && user) {
    // Extract roles from ID token claims if available
    const idTokenClaims = user.idTokenClaims;
    if (idTokenClaims && idTokenClaims.roles) {
      setUserRoles(idTokenClaims.roles as string[]);
    } else {
      // Fallback: fetch roles from user API
      apiService.get('/api/user/me')
        .then(userData => {
          if (userData.roles) {
            setUserRoles(userData.roles);
          }
        })
        .catch(error => {
          console.error('Failed to fetch user roles:', error);
          setUserRoles([]);
        });
    }
  } else {
    setUserRoles([]);
  }
}, [isAuthenticated, user]);

// Add hasRole function to context
const hasRole = useCallback((role: string) => {
  return userRoles.includes(role);
}, [userRoles]);

// Add to context value
const contextValue: AuthContextProps = {
  // Existing properties...
  userRoles,
  hasRole
};
```

5. Create a role-based component for conditional rendering:
```typescript
import React from 'react';
import { useAuth } from '../auth/AuthContext';

interface RoleBasedProps {
  requiredRole: string;
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const RoleBased: React.FC<RoleBasedProps> = ({ 
  requiredRole, 
  children, 
  fallback = null 
}) => {
  const { hasRole } = useAuth();
  
  return hasRole(requiredRole) ? <>{children}</> : <>{fallback}</>;
};
```

6. Use the role-based component in the UI:
```tsx
<RoleBased requiredRole="Admin">
  <AdminPanel />
</RoleBased>
```

# Test Strategy:
1. Test role extraction from Azure AD tokens
2. Verify role-based authorization policies
3. Test role-based UI rendering
4. Verify role synchronization between Azure AD and the application
5. Test access control for different user roles
6. Verify role updates are reflected in the application

# Subtasks:
## 1. Configure Azure AD Roles [pending]
### Dependencies: None
### Description: Set up and assign appropriate roles in Azure Active Directory using the Azure portal. This includes creating custom roles if needed, assigning roles to users, groups, or service principals, and ensuring the correct scope and permissions are applied.
### Details:
Follow Azure portal steps to create and assign roles: navigate to Access control (IAM), select or create roles, assign them to users/groups/service principals, and document the assignments for reference.[1][2][5]

## 2. Implement Backend Role Extraction [pending]
### Dependencies: 14.1
### Description: Develop backend logic to extract and process user roles from Azure AD tokens or claims after authentication. Ensure roles are correctly mapped and available for authorization checks.
### Details:
Integrate with Azure AD authentication flow, parse tokens to extract assigned roles, and make roles accessible in backend user context for downstream authorization.

## 3. Update Authorization Policies in Backend [pending]
### Dependencies: 14.2
### Description: Update or create backend authorization policies to enforce access control based on extracted roles. Ensure that endpoints and resources are protected according to role requirements.
### Details:
Define and implement policy logic (e.g., middleware, decorators, or attribute-based access control) that checks user roles before granting access to protected resources.

## 4. Handle Roles in Frontend Authentication Flow [pending]
### Dependencies: 14.2
### Description: Update frontend authentication logic to retrieve and process user roles from authentication tokens or APIs. Ensure the frontend is aware of the user's roles for UI and routing decisions.
### Details:
Parse roles from ID/access tokens or fetch from backend, store roles in frontend state management, and make them available for UI logic.

## 5. Implement Role-Based UI Components [pending]
### Dependencies: 14.4
### Description: Develop UI components and logic that render or restrict features based on the user's roles. Ensure that only authorized users see or interact with role-protected UI elements.
### Details:
Use role information in frontend to conditionally display menus, buttons, and pages. Implement guards or wrappers to enforce role-based visibility and actions.

